package com.leetcode.oj;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.leetcode.util.ArrayUtil;

public class ShortestDistanceFromAllBuildings {
	public int shortestDistance(int[][] grid) {
        int rows = grid.length, cols = grid[0].length;
        int ones = 0;
        List<Integer> zeros = new ArrayList<>();
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 1)
                    ones++;
                else if (grid[r][c] == 0)
                    zeros.add(cols*r + c);
            }
        }
        int min = -1;
        for (int zero : zeros) {
            int count = dist(zero, grid, rows, cols, ones);
            if (count > 0) {
                if (min < 0)
                    min = Integer.MAX_VALUE;
                min = Math.min(min, count);
            }
        }
        return min;
    }
    
    private int dist(int zero, int[][] grid, int rows, int cols, int ones) {
        int[][] moves = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        List<Integer> list = new ArrayList<>();
        list.add(zero);
        Set<Integer> visited = new HashSet<>();
        visited.add(zero);
        int dist = 0, h = 1;
        while (!list.isEmpty()) {
            List<Integer> nextList = new ArrayList<>();
            for (int p : list) {
                int r1 = p / cols;
                int c1 = p % cols;
                for (int[] move : moves) {
                    int r2 = r1 + move[0];
                    int c2 = c1 + move[1];
                    if (r2 >= 0 && r2 < rows && c2 >= 0 && c2 < cols && visited.add(cols*r2 + c2)) {
                        if (grid[r2][c2] == 1) {
                            dist += h;
                            if (--ones == 0)
                                return dist;
                        } else if (grid[r2][c2] == 0) {
                            nextList.add(cols*r2 + c2);
                        }
                    }
                }
            }
            list = nextList;
            h++;
        }
        return dist; // not reachable but required by syntax
    }
    
    public static void main(String[] args) {
    	ShortestDistanceFromAllBuildings instance = new ShortestDistanceFromAllBuildings();
    	int[][] grid;
    	
    	// 7
//    	grid = new int[][]{{1, 0, 2, 0, 1}, {0, 0, 0, 0, 0}, {0, 0, 1, 0, 0}};
    	
    	String s = "[[0,2,2,0,0,0,0,2,0,0,2,2,0,2,2,0,0,0,0,0,0,0,2,0,0,0,2,0,2,2,0,0,0,2,0,0,2,0,0,0,2,0,0,2,2,0],[2,2,0,0,0,2,0,0,0,0,0,2,0,2,2,0,2,2,2,2,0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,2,2,0,0,0,0,0,2,2,2,0],[0,0,0,0,2,0,0,0,0,0,1,2,2,0,1,0,0,2,0,0,0,0,2,0,0,0,0,1,2,2,0,1,2,0,0,0,1,0,0,0,0,0,0,2,0,0],[2,0,0,2,0,0,2,0,0,1,2,0,2,2,0,2,0,0,0,0,2,0,0,2,0,0,0,2,2,0,0,2,0,2,0,1,2,0,0,0,0,0,2,2,2,0],[2,0,2,0,1,0,0,0,2,0,0,2,2,0,2,2,2,0,0,1,2,2,0,0,1,0,2,1,2,0,2,2,0,1,0,0,0,0,2,0,0,2,0,2,0,0],[2,2,2,2,2,2,0,0,0,0,0,2,0,0,1,0,2,0,0,2,0,0,2,0,2,2,0,0,2,2,2,0,0,2,2,2,2,0,1,2,0,0,2,0,0,0],[2,2,0,0,0,0,2,0,0,0,0,0,0,2,0,2,2,2,1,0,0,0,2,2,0,2,0,0,0,2,0,2,2,2,2,0,0,0,0,0,0,2,1,2,0,0],[2,0,2,2,0,0,0,0,2,0,0,0,2,0,0,0,0,0,1,0,2,1,0,2,2,0,0,0,0,2,1,0,0,0,0,2,0,2,2,0,2,0,2,2,2,0],[0,0,2,2,2,2,2,1,2,2,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,2,0,2,1,0,0,0,2,2,0,0,2,1,0,0,0,0,0,0],[0,0,0,2,0,2,0,2,0,2,2,2,0,0,0,0,0,0,0,0,2,0,2,2,1,0,2,2,0,2,2,2,2,0,2,2,0,2,0,0,0,0,0,0,0,0],[2,0,0,1,2,2,1,0,2,2,0,0,2,0,2,1,0,0,2,0,0,0,2,0,2,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,2,0,1,2,2,0],[2,1,2,1,2,2,0,0,0,0,0,2,0,0,2,0,2,2,1,2,0,2,1,2,2,0,0,0,0,0,0,0,0,0,2,0,0,0,2,2,0,0,0,0,2,2],[0,0,0,0,0,1,0,0,2,0,0,2,0,2,0,2,2,0,2,0,1,2,2,2,0,2,2,0,0,0,2,2,2,0,2,0,0,0,2,0,0,0,2,0,0,2],[0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,0,0,2,0,0,0,2,0,1,0,2,0,1,0,2,2,1,0,0,1,2,0,2,0,0,0,2,0,0,0],[2,2,0,0,0,0,0,2,2,0,2,2,2,2,0,0,0,2,0,0,0,0,2,0,2,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,1,2,0,0],[2,1,2,2,2,1,2,0,2,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,2,0,2,0,2,2],[0,2,0,0,1,0,1,0,1,0,2,2,2,0,2,2,2,2,0,2,0,0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,2,2,0],[2,2,0,2,0,0,2,2,2,0,0,0,0,0,2,2,2,0,0,0,1,0,2,0,2,0,0,1,0,0,0,0,0,2,0,0,0,1,0,0,2,0,0,0,0,0],[0,0,2,0,0,2,0,0,2,0,2,2,0,2,0,2,0,2,2,0,2,0,2,2,2,0,0,0,0,2,0,0,2,0,0,0,0,0,0,2,0,0,0,2,0,0],[1,2,0,0,2,0,0,0,0,1,0,2,2,0,2,1,1,2,0,0,2,1,2,0,0,0,2,0,0,2,0,2,2,2,2,2,2,0,2,0,1,2,2,0,2,2],[0,0,0,0,2,0,0,0,1,0,2,2,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,1,2,0,2,2,2,0,1,2,2,1,0,2,2,0,2,0],[2,0,2,0,0,2,2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2,0,0,2,2,0,2,0,0,0,2,0,2,0,2,2,0,0,0,0,0,0,0,0,2],[0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,2,0,0,0,2,0,0,0,2,0,0,0,2,2,0,2,0,0,0,2,2,0,2,0,1,0,1,0,1],[2,1,0,2,2,0,2,0,0,2,0,0,1,2,0,0,2,0,2,0,0,2,2,0,2,0,0,0,1,0,0,0,2,0,1,0,0,2,0,2,2,2,0,0,1,2],[2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,2,0,2,2,2,0,0,2,0,0,2,0,2,0,0,0,2,1,2,2,0,2,0,2],[0,2,2,0,0,2,0,0,0,2,0,0,0,2,0,2,0,0,2,1,2,0,2,0,0,2,2,0,0,0,0,0,1,0,0,0,2,0,2,1,0,0,0,2,1,0],[1,2,0,2,0,0,0,2,0,2,2,1,0,0,1,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,0,2,0,2,0,0,2,0,0,0,0,0],[0,2,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,1,2,2,2,0,0,0,0,0,0,0,0,0,0,1,0,2,2,0,0,2,0,0,0,2,0,1,0,0],[2,2,2,0,2,0,2,2,2,0,2,0,2,2,0,2,0,2,2,0,2,1,0,0,1,0,2,0,0,0,2,0,0,0,0,0,1,2,2,0,0,0,0,0,2,0],[0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,2,2,0,2,0,0,2,0,0,2,2,0,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,2],[0,1,0,2,0,0,0,0,0,2,2,2,0,1,0,0,2,2,0,0,0,0,2,0,2,0,0,1,0,1,0,0,2,2,0,2,0,2,0,0,0,1,0,0,0,2],[0,0,0,2,0,0,2,0,2,0,0,0,0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,2,0,0,0,2,2,1,2],[2,1,2,2,0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,0,2,1,0,0,2,2,0,2,2,0,0,2,2,2,0,0,0,2,0,0,0],[1,1,0,0,0,2,2,0,0,0,2,2,2,2,0,2,1,1,0,2,0,0,2,0,0,0,2,2,0,0,2,2,2,0,2,0,0,0,0,2,2,0,2,1,0,2],[2,2,0,2,0,0,2,0,2,0,0,2,0,0,0,2,0,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,2,0,2,2],[2,1,2,0,0,0,0,0,2,1,0,1,0,0,2,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,2,0,0,2,0,2,0,0,2,0,0],[0,0,0,0,1,2,1,2,0,0,2,0,0,2,1,0,2,2,0,0,2,0,2,0,2,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,2,0,0,2,1,0],[1,0,0,0,1,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,2,2,0,2,2,0,2,2,0,2,0,0,0,2,0,0],[0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,1,0,2,0,2,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,2],[2,2,0,0,0,0,2,2,1,2,2,2,0,1,0,2,0,2,2,0,1,0,2,0,0,2,0,2,0,1,0,0,0,0,2,2,2,0,0,2,2,1,2,2,1,0],[2,0,0,2,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,2,0,2,2,2,0,0,2,0,0,0,2,0,0,0,1,0,2,2,2,0,0,2,2,0,0],[2,0,1,2,0,0,0,0,2,2,0,0,2,0,0,2,0,0,0,1,2,0,0,2,0,2,2,0,2,0,1,2,0,0,0,2,2,0,2,0,0,2,0,0,2,0]]";
    	grid = ArrayUtil.str2int2DArray(s);
    	
    	long t1 = System.currentTimeMillis();
    	int result = instance.shortestDistance(grid);
    	long t2 = System.currentTimeMillis();
    	System.out.println("result=" + result);
    	System.out.println(String.format("total time=%,dms", (t2 - t1)));
	}
}
